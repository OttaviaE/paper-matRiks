rjtools::create_article(name="matRiks-paper")
logic1 <- mat_apply(square4(), hrules = "AND")
draw(logic1)
library(matRiks)
logic1 <- mat_apply(square4(), hrules = "AND")
draw(logic1)
logic2 <- mat_apply(miley(), vrules = "OR")
draw(logic2)
logic <- com(logic1, logic2)
draw(logic)
m = mat_apply(dot(), "shade", "shade")
logic <- com(logic1, logic2, m)
draw(logic)
responses <- response_list(logic)
draw(responses, main = TRUE)
logic <- com( m,logic1, logic2)
draw(logic)
responses <- response_list(logic)
library(matRiks)
draw(biscuit())
draw(biscuit())
draw(pacman())
draw(maxi())
tbl_img %>%
kbl(booktabs = T) %>%
kable_paper(full_width = F) %>%
column_spec(2, image = spec_image(
c("black-figures.png", "circle-sections.png", "other-figures.png"), 50, 50, 50))
draw(luck())
draw(vertical_eight())
draw(miley())
draw(X())
library(kableExtra)
tbl_img <- data.frame(
Category = c("Black-Figures", "Circle-Sections", "Other-Figures", "Flowers"),
Example = ""
)
tbl_img %>%
kbl(booktabs = T) %>%
kable_paper(full_width = F) %>%
column_spec(2, image = spec_image(
c("black-figures.png", "circle-sections.png", "other-figures.png", "flowers.png"), 50, 50, 50, 50))
tbl_img %>%
kbl(booktabs = T) %>%
kable_paper(full_width = F) %>%
column_spec(2, image = spec_image(
c("black-figures.png", "circle-sections.png", "other-figures.png"), 50, 50, 50, 50))
tbl_img <- data.frame(
Category = c("Black-Figures", "Circle-Sections", "Other-Figures"),
Example = ""
)
tbl_img %>%
kbl(booktabs = T) %>%
kable_paper(full_width = F) %>%
column_spec(2, image = spec_image(
c("black-figures.png", "circle-sections.png", "other-figures.png"), 50, 50, 50))
tbl_img %>%
kbl(booktabs = T) %>%
kable_paper(full_width = F) %>%
column_spec(2, image = spec_image(
c("black-figures.png", "circle-sections.png", "other-figures.png"), 50, 50, 50)) %>%
column_spec(4, image = spec_image(
c("black-figures.png", "circle-sections.png", "other-figures.png"), 50, 50, 50))
tbl_img <- data.frame(
Category = c("Black-Figures", "Circle-Sections", "Other-Figures"),
Example = "",
Category = c("Black-Figures", "Circle-Sections", "Other-Figures"),
Example = ""
)
tbl_img %>%
kbl(booktabs = T) %>%
kable_paper(full_width = F) %>%
column_spec(2, image = spec_image(
c("black-figures.png", "circle-sections.png", "other-figures.png"), 50, 50, 50)) %>%
column_spec(4, image = spec_image(
c("black-figures.png", "circle-sections.png", "other-figures.png"), 50, 50, 50))
tbl_img <- data.table(
Category = c("Black-Figures", "Circle-Sections", "Other-Figures"),
Example = "",
Category = c("Black-Figures", "Circle-Sections", "Other-Figures"),
Example = ""
)
library(data.table)
tbl_img <- data.table(
Category = c("Black-Figures", "Circle-Sections", "Other-Figures"),
Example = "",
Category = c("Black-Figures", "Circle-Sections", "Other-Figures"),
Example = ""
)
tbl_img
tbl_img %>%
kbl(booktabs = T) %>%
kable_paper(full_width = F) %>%
column_spec(2, image = spec_image(
c("black-figures.png", "circle-sections.png", "other-figures.png"), 50, 50, 50)) %>%
column_spec(4, image = spec_image(
c("black-figures.png", "circle-sections.png", "other-figures.png"), 50, 50, 50))
tbl_img <- data.table(
"Figure Category" = c("Black figures", "Circle sections", "Closed figures"),
Example = "",
"Figure Category"  = c("Flower figures", "Eight-shaped figrues", "Other-Figures"),
Example = "",
"Figure Category" = c("Black figures", "Circle sections", "Closed figures"),
Example = ""
)
tbl_img
tbl_img %>%
kbl(booktabs = T) %>%
kable_paper(full_width = F) %>%
column_spec(2, image = spec_image(
c("black-figures.png", "circle-sections.png", "other-figures.png"), 50, 50, 50)) %>%
column_spec(4, image = spec_image(
c("black-figures.png", "circle-sections.png", "other-figures.png"), 50, 50, 50)) %>%
column_spec(6,
image = spec_image(
c("black-figures.png", "circle-sections.png", "other-figures.png"), 50, 50, 50))
draw(luck())
draw(vertical_eight())
draw(miley())
draw(X())
install.packages("rjtools")
install.packages("rjtools")
install.packages("tinytext")
install.packages("rjtools")
knit_with_parameters("~/GitHub/paper-matRiks/matRiks-paper.Rmd")
yaml
library(yaml)
install.packages("rticles")
rticles::rjournal_article()
rjtools::rjournal_pdf_article()
tbl_img %>%
kbl(booktabs = TRUE) %>%
kable_paper(full_width = FALSE) %>%
column_spec(2, image = spec_image(
c("black-figures.png", "circle-sections.png", "closed-figures.png"), 50, 50, 50)) %>%
column_spec(4, image = spec_image(
c("flowers.png", "eight-shapes-figures.png", "lines.png"), 50, 50, 50)) %>%
column_spec(6,
image = spec_image(
c("other-figures.png" ), 50,50,50))
# Chunk 1: setup
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE)
library(plotly)
library(ggplot2)
library(palmerpenguins)
library(kableExtra)
library(data.table)
library(matRiks)
library(knitr)
library(kableExtra)
library(tidyverse)
# Chunk 2: visuoRule
a = mat_apply(maxi(), hrules = "size")
par(mfrow =c(1, 3) ,
mar = c(6,5,5,5))
draw(a$Sq1); draw(a$Sq2); draw(a$Sq3)
# Chunk 3: logiRule
size.x = 8
size.y = 4
pos.x = 0
shd = NA
lty = 1
lwd = 3
par(mfrow =c(1, 3) ,
mar = c(6,5,5,5))
a = mat_apply(cof(luck(pos.x = pos.x + size.x, pos.y = pos.x, rot = pi,
size.x = size.x, size.y = size.y, shd = shd, lty = lty,
lwd = lwd), luck(pos.x = pos.x - size.x, pos.y = pos.x,
rot = -pi, size.x = size.x, size.y = size.y, shd = shd,
lty = lty, lwd = lwd), luck(pos.x = pos.x, pos.y = pos.x +
size.x, rot = -pi, size.x = size.y, size.y = size.x,
shd = shd, lty = lty, lwd = lwd), luck(pos.x = pos.x,
pos.y = pos.x - size.x, rot = -pi, size.x = size.y, size.y = size.x,
shd = shd, lty = lty, lwd = lwd)), hrules = "AND")
draw(a$Sq1); draw(a$Sq2); draw(a$Sq3)
# Chunk 4: tab-error-types-interactive
error_types = data.table(Distractors = c("Repetition (R)", "", "",
"Difference (D)", "", "","",
"Wrong Principle (WP)", "", "",
"Incomplete Correlate (IC)", "", "", "","", "","" )
,
Definition	= c("Entries of the matrix adjacent to the blank cell", "", "",
"Combination of all the entries of the matrix or the combination of some of their features. It is different from any entry of the matrix and from the other distractors.", "", "", "", 	"Copy or combination of the matrix entries according to another rule", "", "",
"Correct response with a variation on only a single feature.", "", "", "", "","", ""),
"Specific Error" = c("R-Left", 	"R-Top",
"R-Diag", 	"D-Blank", 	"D-Union", 	"D-Plus",
"D-Diff", 	"WP-Copy", "WP-Flip",
"WP-Matrix", "IC-Neg",
"IC-Fill",
"IC-Flip",
"IC-Layout", "IC-Scale","IC-Num", "IC-Inc"
), "Specific definition" = c("Repetition of the cell left to the blank space",
"Repetition of the cell above to the blank space",
"Repetition of the cell right to the blank space",
"Filled completely white or black",
"Some elements of one entry are emphasized",
"Some entries of the matrix are combined together",
"Qualitatively different from any other distractor and any entry of the matrix, resulting in a pop-out effect.",
"Repetition of a cell non adjacent to the blank space",
"Rotation or refection of one entry of the matrix.",
"Transformation or combination of some entries of the matrix or of their elements",
"Negative of the correct response",
"Correct response with a different texture or style.",
"The elements of the correct response are displayed with a different layout",
"Elements of the correct response with different proportion or different size of the correct response.", "Correct response with a different number of elements (small layout changes are allowed)",
"Correct response with a missing element.")
)
kbl(error_types, align = "l", caption = "Taxonomy of error types") %>%
column_spec(1, bold = T)
# Chunk 5: tab-error-types-static
error_types = data.table(Distractors = c("Repetition (R)", "", "",
"Difference (D)", "", "","",
"Wrong Principle (WP)", "", "",
"Incomplete Correlate (IC)", "", "", "","", "","" )
,
Definition	= c("Entries of the matrix adjacent to the blank cell", "", "",
"Combination of all the entries of the matrix or the combination of some of their features. It is different from any entry of the matrix and from the other distractors.", "", "", "", 	"Copy or combination of the matrix entries according to another rule", "", "",
"Correct response with a variation on only a single feature.", "", "", "", "","", ""),
"Specific Error" = c("R-Left", 	"R-Top",
"R-Diag", 	"D-Blank", 	"D-Union", 	"D-Plus",
"D-Diff", 	"WP-Copy", "WP-Flip",
"WP-Matrix", "IC-Neg",
"IC-Fill",
"IC-Flip",
"IC-Layout", "IC-Scale","IC-Num", "IC-Inc"
), "Specific definition" = c("Repetition of the cell left to the blank space",
"Repetition of the cell above to the blank space",
"Repetition of the cell right to the blank space",
"Filled completely white or black",
"Some elements of one entry are emphasized",
"Some entries of the matrix are combined together",
"Qualitatively different from any other distractor and any entry of the matrix, resulting in a pop-out effect.",
"Repetition of a cell non adjacent to the blank space",
"Rotation or refection of one entry of the matrix.",
"Transformation or combination of some entries of the matrix or of their elements",
"Negative of the correct response",
"Correct response with a different texture or style.",
"The elements of the correct response are displayed with a different layout",
"Elements of the correct response with different proportion or different size of the correct response.", "Correct response with a different number of elements (small layout changes are allowed)",
"Correct response with a missing element.")
)
kbl(error_types, align = "l",
caption = "Taxonomy of error types") %>% column_spec(1, bold = T)
# Chunk 7: square
draw(square())
tbl_img <- data.table(
"Figure Category" = c("[Black figures](https://cran.r-project.org/web/packages/matRiks/vignettes/black-figures.html)", "[Circle sections](https://cran.r-project.org/web/packages/matRiks/vignettes/circle-sections.html)", "[Closed figures](https://cran.r-project.org/web/packages/matRiks/vignettes/closed-figures.html)"),
Example = "",
"Figure Category"  = c("[Flowers figures](https://cran.r-project.org/web/packages/matRiks/vignettes/flowers-figures.html)", "[Eight-shaped figures](https://cran.r-project.org/web/packages/matRiks/vignettes/eight-shapes-figures.html)", "[Lines](https://cran.r-project.org/web/packages/matRiks/vignettes/lines.html)"),
Example = "",
"Figure Category" = c("[Other figures](https://cran.r-project.org/web/packages/matRiks/vignettes/other-figures.html)", "", ""),
Example = ""
)
tbl_img %>%
kbl(booktabs = TRUE) %>%
kable_paper(full_width = FALSE) %>%
column_spec(2, image = spec_image(
c("black-figures.png", "circle-sections.png", "closed-figures.png"), 50, 50, 50)) %>%
column_spec(4, image = spec_image(
c("flowers.png", "eight-shapes-figures.png", "lines.png"), 50, 50, 50)) %>%
column_spec(6,
image = spec_image(
c("other-figures.png" ), 50,50,50))
?column_spec
tinytex::install_tinytex()
tinytex::tlmgr_update()
rule_types = data.table(Rule = c("Identity", "AND", "OR", "XOR", "line width", "line type", "rotate", "size", "shape", "shade", "multi shade"),
Classification = c("", "logical", "logical", "logical", "permutational", "permutational", "incremental", "incremental", "permutational", "permutational", "permutational"),
Function = c("\\texttt{identity}", "\\texttt{logical}", "\\texttt{logical}", "\\texttt{logical}", "\\texttt{margin}", "\\texttt{margin}", "\\texttt{rotate}", "\\texttt{size}", "\\texttt{shape}", "\\texttt{shade}", "\\texttt{shade}"),
Definition = c("Return the original figure without any transformation",
"Considering the input cell \\texttt{fig}, a concatenation of at least three figures is partitioned into three sets: A, B, and C. The rule transforms the figures such that each row or column in the matrix follows a specific sequence of patterns. In these patterns, the first cell displays figures $\\{A, C\\}$, the second cell displays $\\{A, B\\}$, and the third one exclusively displays figure A. The partitioning of the figures into sets A, B, and C is randomly determined with a random seed based on the \\texttt{n} rows/columns of the matrix.",
"Considering the input cell \\texttt{fig}, a concatenation of at least three figures is partitioned into three sets: A, B, and C. The rule transforms the figures such that each row or column in the matrix follows a specific sequence of patterns. In these patterns, the first cell displays figures $\\{A, C\\}$, the second cell displays $\\{A, B\\}$, and the third one combines all of them in $\\{A, B, C\\}$. The partitioning of the figures into sets A, B, and C is randomly determined with a random seed based on the \\texttt{n} rows/columns of the matrix.",
"Considering the input cell \\texttt{fig}, a concatenation of at least three figures is partitioned into three sets: A, B, and C. The rule transforms the figures such that each row or column in the matrix follows a specific sequence pattern. In these patterns, the first elements display figures $\\{A, C\\}$, the second display $\\{A, B\\}$, and the third display $\\{B, C\\}$. The partitioning of the figures into sets A, B, and C is randomly determined with a random seed based on the \\texttt{n} rows/columns of the matrix.",
"Considering a figure or concatenation of figures, the \\texttt{lwd} rule increases the width of the lines in the figure by a constant value \\texttt{n} corresponding to the number of rows or columns in the matrix. Therefore, the width can have values 1, 2, or 3 of the default width argument of the R plot. Conversely, the reverse rule \\texttt{lwd.inv} decreases the line width by the same quantity.",
"Considering a figure or concatenation of figures, the \\texttt{lty} rule changes the line type by manipulating the line type argument of the R plot. In the default order with the values of \\texttt{n} from 1 to 3, the lines are \\texttt{dashed}, \\texttt{dotted}, and \\texttt{solid}, respectively. Using the reverse rule, with the values of \\texttt{n} from 1 to 3, \\texttt{lty.inv} has the order \\texttt{dashed}, \\texttt{solid}, and \\texttt{dotted}.",
"Considering a figure or concatenation of figures and an angle $\\theta$, the rule rotates the figure around its center clockwise by an angle $n\\theta$, where $n$ is the argument \\texttt{n} of the function. The value of $\\theta$ is equal to $\\pi$ divided by any number from 1 to 9 included in the \\texttt{rule} argument of the function. For instance, \\texttt{rule=rotation.5} sets $\\theta = \\pi / 5$. By default, $\\theta = \\pi / 4$. The reverse rule \\texttt{rotation.inv} rotates the figure anticlockwise.",
"Considering a figure or concatenation of figures and a constant $k$, the rule \\texttt{size} decreases the figure size proportionally to $nk$, where $n$ is the argument \\texttt{n} of the function. Specifically, the \\texttt{size.x} and \\texttt{size.y} arguments of the figure are divided by $nk$. The default value of $k=0.9$. The reverse rule \\texttt{size.inv} increases the figure arguments \\texttt{size.x} and \\texttt{size.y} by $nk$ times, with a default value of $k=0.6$.",
"Considering a concatenation of three single figures denoted A, B, and C, the \\texttt{shape} rule permutates which figure is visible in each cell of the matrix. The default order is figures A, B, and C from left to right in the row or from top to bottom in the column. The reverse rule \\texttt{shape.inv} has the order C, B, and A.",
"Considering a figure or concatenation of figures, the \\texttt{shade} rule changes the color of the filling. The argument \\texttt{n} of the function goes from 1 to 3 and is mapped into \\texttt{white}, \\texttt{grey}, and \\texttt{black}, respectively. The rule ignores any previous color present in the figure. For instance, when \\texttt{n=1} and a figure has \\texttt{shd=black}, the application of the rule transforms it into \\texttt{white}. There is no reverse rule available at the moment.",
"Considering a concatenation of figures, the \\texttt{multi.shade} rule changes the color of the filling of each figure separately. The rule works exactly as the normal \\texttt{shade}, but a random color is assigned to each figure before the transformation. The random color is assigned with the function \\texttt{sample} using \\texttt{seed(n)}."
))
library(plotly)
library(ggplot2)
library(palmerpenguins)
library(kableExtra)
library(data.table)
library(matRiks)
library(knitr)
library(kableExtra)
library(tidyverse)
rule_types = data.table(Rule	 =c("	Identity	","	AND	","	OR	","	XOR	","	line width	","	line type	","	rotate	","	size	","	shape	","	shade	","	multi shade	"),
Classification	 =c("		","	logical	","	logical	","	logical	","	permutational	","	permutational	","	incremental	","	incremental	","	permutational	","	permutational	","	permutational	"),
Function	 =c("	`identity`	","	`logical`	","	`logical`	","	`logical` 	","	`margin`	","	`margin`	","	`rotate`	","	`size`	","	`shape`	","	`shade`	","	`shade`	"),
Definition	 =c("	Return the orginal figure without any transformation	",
"	Considering the input cell `fig`, a concatenation of at least three figures is partitioned into three sets: A, B, and C. The rule transforms the figures such that each row or column in the matrix follows a specific sequence of patterns. In these patterns, the first cell displays figures {A, C}, the second cell displays {A, B}, and the third one exclusively displays figure A. The partitioning of the figures into sets A, B, and C is randomly determined with a random seed based on the  `n` rows/columns of the matrix.	",
"	Considering the input cell `fig`, a concatenation of at least three figures is partitioned into three sets: A, B, and C. The rule transform the figures, such that each row or column in the matrix follows a specific sequence of patterns. In these patterns, the first cell displays figures {A, C}, the second cell displays {A, B}, and the third one combines all of them in {A,B,C}. The partitioning of the figures into sets A, B, and C is randomly determined with a random seed based on the  `n` rows/columns of the matrix.	",
"Considering the input cell `fig`, a concatenation of at least three figures is partitioned into three sets: A, B, and C. The rule transform the figures, such that each row or column in the matrix follows a specific sequence pattern. In these patterns, the first elements display figures {A, C}, the second display {A, B}, and the third display {B,C}. The partitioning of the figures into sets A, B, and C is randomly determined with a random seed based on the  `n` rows/columns of the matrix.	",
"	Considering a figure or concatenation of figures, the `lwd` rule increases the width of the lines in the figure by a constant value `n` corresponding to the number of row or column in the matrix. Therefore, the width can have values 1, 2, or 3 of the default width argument of the R plot. Conversely, the reverse rule `lwd.inv` decreases the line width by the same quantity.	",
"	Considering a figure or concatenation of figures, the `lty` rule changes the lines type manipulating the lines type argument of the R plot. In the default order with the values of `n` from 1 to 3, the lines are  `dashed`, `dotted`, and   `solid`, respectively. Using the reverse rule, with the values of `n` from 1 to 3, `lty.inv` has the order `dashed`, `solid`, and `dotted`.   	",
"	Considering a figure or concatenation of figures and an angle $\\theta$, the rule rotates the figure around its center clockwise of an angle $n \\theta$, where $n$ is the argument `n` of the function. The value of $\\theta$ is equal to $\\pi$ divided by any number from 1 to 9 included in the `rule` argument of the function, for instance, `rule=rotation.5` have a  $\\theta = \\pi / 5$.  By default $\\theta = \\pi / 4$ . The reverse rule `rotation.inv` rotates the figure anticlockwise. 	",
"	Considering a figure or concatenation of figures and a constant $k$, the rule size decreases the figure size proportionally to $nk$ , where $n$ is the argument `n` of the function. Specifically, the `size.x` and `size.y` arguments of the figure are divided by $nk$. The default value of $k=.9$. The reverse rule `size.inv` increases the figure arguments `size.x` and `size.y` of  $nk$ times with a default value of $k=.6$.	",
"	Considering a concatenation of three single figures denoted A, B, and C, the `shape` rule permutates which figure is visible in each cells of the matrix. The default order is figures A, B, and C from left to right in the row or from up to bottom in the column. The reverse rule `shape.inv` has the order C, B, and A.   	",
"	Considering a figure or concatenation of figures, the `shade` rule changes the color of the filling. The argument `n` of the function goes from 1 to 3 and it is mapped into `white`, `grey`, and   `black, respectively. The rule ignore any previous color presented in the figure.For instance, when $n=1$ and a figure has `shd=black`the application of the rule transforms it into `white`. It does not exist a reverse rule available at the moment.   	",
"	Considering a concatenation of figures the `multi.shade` rule changes the color of the filling of each figure separately. The rules work exactly as the normal `shade` but a random color is assigned to each figure before the transformation.  The random color is assigned with the function `sample` with `seed(n)`.")
)
kbl(rule_types, align = "l", caption = "Taxonomy of error types", label = "tab-error-types") %>%
kable_paper(full_width = FALSE) %>%
column_spec(1, bold = TRUE) %>%
collapse_rows( valign = "top")
